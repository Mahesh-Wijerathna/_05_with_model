pipeline {
    agent any

    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out code...'
                checkout scm
            }
        }

        stage('Check Docker Version') {
            steps {
                echo 'Checking Docker and Docker Compose versions...'
                bat 'docker --version'
                bat 'docker compose version'
            }
        }

        stage('Check Docker Connectivity') {
            steps {
                echo 'Checking Docker Hub connectivity...'
                script {
                    try {
                        bat 'docker pull hello-world'
                        echo '‚úÖ Docker Hub connectivity is working!'
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è  Docker Hub connectivity issue detected: ${e.getMessage()}"
                        echo 'This might cause build failures. Checking alternative approaches...'

                        // Try to check if images are already cached locally
                        bat 'docker images || echo "Cannot check local images"'

                        // Suggest solutions
                        echo 'Possible solutions:'
                        echo '1. Check your internet connection'
                        echo '2. Try using a different Docker registry mirror'
                        echo '3. Use locally cached images if available'
                        echo '4. Check firewall/proxy settings'
                    }
                }
            }
        }

        stage('Verify Docker Compose File') {
            steps {
                echo 'Checking if docker-compose.yml exists...'
                script {
                    dir('Game-Review-Sentiment-Analysis-Web-app') {
                        if (fileExists('docker-compose.yml')) {
                            echo '‚úÖ docker-compose.yml found!'
                            // Read and display basic info about the compose file
                            def composeContent = readFile 'docker-compose.yml'
                            echo 'Docker Compose file contents preview:'
                            // Show first few lines for verification
                            def lines = composeContent.split('\n')
                            for (int i = 0; i < Math.min(5, lines.size()); i++) {
                                echo "  ${lines[i]}"
                            }

                            // Check if Dockerfiles exist
                            if (fileExists('game-review-sentiment/Dockerfile')) {
                                echo '‚úÖ Frontend Dockerfile found!'
                            } else {
                                echo '‚ùå Frontend Dockerfile missing!'
                            }

                            if (fileExists('game-review-sentiment-backend/Dockerfile')) {
                                echo '‚úÖ Backend Dockerfile found!'
                            } else {
                                echo '‚ùå Backend Dockerfile missing!'
                            }
                        } else {
                            error '‚ùå docker-compose.yml not found! Pipeline cannot continue.'
                        }
                    }
                }
            }
        }

        stage('Run Hello World Service') {
            steps {
                echo 'Running Hello World service from docker-compose...'
                script {
                    // Change to the correct directory containing docker-compose.yml
                    dir('Game-Review-Sentiment-Analysis-Web-app') {
                        bat 'docker compose run --rm hello-world'
                    }
                }
            }
        }

        stage('Build Frontend') {
            steps {
                echo 'Building frontend service...'
                script {
                    dir('Game-Review-Sentiment-Analysis-Web-app') {
                        // Retry logic for Docker build to handle network issues
                        def maxRetries = 3
                        def retryCount = 0
                        def buildSuccess = false

                        while (retryCount < maxRetries && !buildSuccess) {
                            try {
                                echo "Attempt ${retryCount + 1} of ${maxRetries} to build frontend..."
                                bat 'docker compose build --no-cache frontend'
                                buildSuccess = true
                                echo '‚úÖ Frontend build successful!'
                            } catch (Exception e) {
                                retryCount++
                                echo "‚ùå Frontend build attempt ${retryCount} failed: ${e.getMessage()}"

                                if (retryCount < maxRetries) {
                                    echo "‚è≥ Waiting 30 seconds before retry..."
                                    bat 'timeout /t 30 /nobreak > nul'

                                    // Clean up any partial builds
                                    bat 'docker system prune -f || echo "Cleanup failed, continuing..."'
                                } else {
                                    echo "‚ùå All ${maxRetries} attempts failed. Checking Docker connectivity..."
                                    // Try to diagnose the issue
                                    bat 'docker info || echo "Docker info failed"'
                                    bat 'docker pull hello-world || echo "Cannot reach Docker Hub"'
                                    error "Frontend build failed after ${maxRetries} attempts. Last error: ${e.getMessage()}"
                                }
                            }
                        }
                    }
                }
            }
        }

        stage('Test Frontend') {
            steps {
                echo 'Running frontend tests...'
                script {
                    dir('Game-Review-Sentiment-Analysis-Web-app') {
                        // Run frontend tests inside the container
                        bat 'docker compose run --rm frontend npm test -- --watchAll=false --passWithNoTests'
                    }
                }
            }
        }

        stage('Build Backend (Optional)') {
            steps {
                echo 'Building backend service...'
                script {
                    dir('Game-Review-Sentiment-Analysis-Web-app') {
                        // Retry logic for Docker build to handle network issues
                        def maxRetries = 3
                        def retryCount = 0
                        def buildSuccess = false

                        while (retryCount < maxRetries && !buildSuccess) {
                            try {
                                echo "Attempt ${retryCount + 1} of ${maxRetries} to build backend..."
                                bat 'docker compose build --no-cache backend'
                                buildSuccess = true
                                echo '‚úÖ Backend build successful!'
                            } catch (Exception e) {
                                retryCount++
                                echo "‚ùå Backend build attempt ${retryCount} failed: ${e.getMessage()}"

                                if (retryCount < maxRetries) {
                                    echo "‚è≥ Waiting 30 seconds before retry..."
                                    bat 'timeout /t 30 /nobreak > nul'

                                    // Clean up any partial builds
                                    bat 'docker system prune -f || echo "Cleanup failed, continuing..."'
                                } else {
                                    echo "‚ùå All ${maxRetries} attempts failed."
                                    error "Backend build failed after ${maxRetries} attempts. Last error: ${e.getMessage()}"
                                }
                            }
                        }
                    }
                }
            }
        }

        stage('Test Services') {
            steps {
                echo 'Running basic service tests...'
                script {
                    dir('Game-Review-Sentiment-Analysis-Web-app') {
                        // Start services in detached mode for testing
                        bat 'docker compose up -d backend frontend'
                        
                        // Wait a moment for services to start
                        bat 'timeout /t 15 /nobreak > nul'
                        
                        // Check if services are running
                        bat 'docker compose ps'
                        
                        // Test hello-world service
                        echo 'Testing hello-world service...'
                        bat 'docker compose run --rm hello-world'
                        
                        // Stop services after testing
                        bat 'docker compose down'
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline completed.'
            // Clean up any running containers from the correct directory
            dir('Game-Review-Sentiment-Analysis-Web-app') {
                bat 'docker compose down || echo "No containers to clean up"'
            }
        }
        success {
            echo 'üéâ Pipeline succeeded!'
            echo 'Your application is ready. You can run:'
            echo '  docker compose up -d'
            echo 'Then visit: http://localhost:3000 (frontend) and http://localhost:5000 (backend)'
        }
        failure {
            echo '‚ùå Pipeline failed!'
            script {
                def failureCause = currentBuild.getResult()
                if (failureCause == 'FAILURE') {
                    echo 'üîç Troubleshooting tips for TLS timeout issues:'
                    echo '1. Check your internet connection'
                    echo '2. Try restarting Docker Desktop'
                    echo '3. Check firewall/proxy settings'
                    echo '4. Try using a VPN if network is restricted'
                    echo '5. Consider using a different Docker registry mirror'
                    echo '6. Check if Docker Hub is accessible: ping registry-1.docker.io'
                }
            }
            // Optional: Send notifications, cleanup, etc.
        }
    }
}
