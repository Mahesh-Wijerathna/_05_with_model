name: Build and Deploy to Minikube

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./Game-Review-Sentiment-Analysis-Web-app/game-review-sentiment
        push: true
        tags: ${{ steps.meta.outputs.tags }}-frontend
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./Game-Review-Sentiment-Analysis-Web-app/game-review-sentiment-backend
        push: true
        tags: ${{ steps.meta.outputs.tags }}-backend
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-to-minikube:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Minikube
      uses: manusa/actions-setup-minikube@v2.12.1
      with:
        minikube version: 'v1.33.1'
        kubernetes version: 'v1.30.0'
        driver: docker

    - name: Deploy to Minikube
      run: |
        # Create namespace
        kubectl create namespace game-review-app --dry-run=client -o yaml | kubectl apply -f -

        # Apply Kubernetes manifests
        kubectl apply -f k8s/

        # Wait for deployments to be ready
        kubectl wait --for=condition=available --timeout=300s deployment/frontend -n game-review-app
        kubectl wait --for=condition=available --timeout=300s deployment/backend -n game-review-app

        # Get service URLs
        echo "Frontend URL: http://$(minikube ip):$(kubectl get svc frontend -n game-review-app -o jsonpath='{.spec.ports[0].nodePort}')"
        echo "Backend URL: http://$(minikube ip):$(kubectl get svc backend -n game-review-app -o jsonpath='{.spec.ports[0].nodePort}')"

    - name: Test deployment
      run: |
        # Test frontend service
        curl -f http://$(minikube ip):$(kubectl get svc frontend -n game-review-app -o jsonpath='{.spec.ports[0].nodePort}') || echo "Frontend not responding"

        # Test backend service
        curl -f http://$(minikube ip):$(kubectl get svc backend -n game-review-app -o jsonpath='{.spec.ports[0].nodePort}') || echo "Backend not responding"
